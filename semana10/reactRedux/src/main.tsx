// üöÄ PUNTO DE ENTRADA DE LA APLICACI√ìN
// Este archivo es donde se inicia toda la aplicaci√≥n React
// Aqu√≠ configuramos el Provider de Redux para que toda la app tenga acceso al store

import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import { Provider } from 'react-redux'
import { store } from './app/store.ts'
import App from './App.tsx'
import './index.css'

// üèóÔ∏è CONFIGURACI√ìN DEL ROOT DE REACT
// createRoot es la nueva API de React 18 para renderizar aplicaciones
const root = createRoot(document.getElementById('root')!)

// üé¨ RENDERIZAR LA APLICACI√ìN
root.render(
  <StrictMode>
    {/* üè™ PROVIDER DE REDUX */}
    {/* El Provider hace que el store de Redux est√© disponible para todos los componentes */}
    <Provider store={store}>
      <App />
    </Provider>
  </StrictMode>
)

// üí° EXPLICACI√ìN DE LOS ELEMENTOS CLAVE:
/*
  1. STRICT MODE: Activa verificaciones adicionales y advertencias en desarrollo
     - Detecta efectos secundarios en funciones puras
     - Advierte sobre APIs deprecadas
     - Detecta problemas de rendimiento
  
  2. PROVIDER: Componente de react-redux que:
     - Hace el store disponible a todos los componentes descendientes
     - Permite usar useSelector y useDispatch en cualquier componente
     - Maneja autom√°ticamente las subscripciones y re-renders
  
  3. CREATEROOT: Nueva API de React 18 que:
     - Habilita las nuevas caracter√≠sticas como Concurrent Features
     - Mejora el rendimiento de las actualizaciones
     - Reemplaza a ReactDOM.render() de versiones anteriores
  
  4. ORDEN DE WRAPPERS: StrictMode ‚Üí Provider ‚Üí App
     - StrictMode debe estar en el nivel m√°s alto para verificar toda la app
     - Provider debe wrappear App para que Redux est√© disponible
*/
